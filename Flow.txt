Create the Folder Notebooks add your Notebooks.
Create the Folder Models add your pickles files.
Change the app name to application.
Add your content in the application files.
In requirements try to downlaod the packages and run the file in the terminal. It should donload all the packages.
Create the Templates folder and add index.html file after adding this data
@app.route("/")
def index():
    return render_template('index.html')
add some lines in the index file.
After that run python application.py in the terminal.

Currently copied the url where workspace is running
https://url upto first /:portnumber/(last slash running the code in flask we mntioned in the @app.route("/")).   -> CLick enter it will be fine.
It is checking the render template and open the index html page from the templated folder.


# For Prediction 

@app.route('/predictdata',methods=['GET','POST'])

def predict_data():
    if request.method=="POST":
        pass
    else:
        return render_template('home.html')

U want to add to predict with help of above function.
Add home.html in the templates-- which will be the html package. This is get method.

Run the file again
https://url upto first /:portnumber/predictdata  ->@app.route('/predictdata',methods=['GET','POST'])

we are able to see the home page.

To see predition result we need some modifications in the post method in application.py file  . IN Post method

Add details and run the file again.

One html is opened type the values and click on predict data. We will get the predicted result based on the given test data.

Once Done with this we need to deploy in the Github.

close the connection in terminal.
type ls -a

By default some git repository is present.

git remote -v  - some repository will present.

To put it in your repository.

git remote rm origin

Create the repository or open the existing repository .

Follow these and execute in terminal.

git init

git add README.md

git commit -m "first commit"

git branch -M main

git remote add origin https://github.com/username/reponame.git

git push -u origin main

Follow these one by one after running the git init

git add .

git status

git commit -m "first commit" . If it ask to run your  name and email address

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

  git branch -M main

  git remote add origin https://github.com/username/reponame.git
  
  git push -u origin main

  It will allow some code and allow all. It will open the Github and authorization in Github.
  Come back terminal . It will prompt enter usernmae and the Password(Personal token)-Once entered all the files will be merged.

# Deployment to AWS
Add folder .ebextensions and add file python.config

In Python config:
#first application is my application.py file 
      #second application is my application = Flask(__name__) in application file.

push the code in the GitHub.

open AWS -> Elastic Beanstalk-> create new application-> Write application name as repo name and in Platform -> Select python 
and application code as a sample application click on create. Wait for environment to be created.

We need to create the pipeline Git Hub to Elastic Beanstalk. To do that Code Pipeline.
Create Pipeline.Enter Name and click on next. Source provider a GitHub (we are getting the code from GitHub repository.
Click on connect to Git Hub. once connected search for repo name and branch as main. Detection options as GitHub webhooks and click on next.
skip build stage and select deploy provider as (aws beanstalk). Once the env is created. In the application name choose the application name and env name
and complete the pipeline.

Once deployed is successful.open the link which will be prompted.
Click on url.
After the open url write the name of the app like / or /predictdata. It will be deployed successfully.


Git Hub to AWS(In AWS we use elastic beanstalk which is the Linux machine where we can create the env and deploy and run the code in that).
we need configuration to connect.
To connect with github to AWS we need pipeline(called Code pipeline)
if changes doone in the github automatically it will be deployed)
